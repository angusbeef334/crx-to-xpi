name: Build and Release on Tag

on:
  push:
    tags:
      - 'v*'  # Matches tags like v1.0.0, v2.3.4

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: crx-to-xpi_linux_x64
            binary_extension: '_linux_x64'
          - os: macos-latest
            artifact_name: crx-to-xpi_mac_universal
            binary_extension: '_mac_universal'
          - os: windows-latest
            artifact_name: crx-to-xpi_win_x64
            binary_extension: '.exe'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies (mac/linux)
      if: matrix.os != 'windows-latest'
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Install dependencies (win)
      if: matrix.os == 'windows-latest'
      run: |
        python -m venv venv
        venv\Scripts\activate.ps1
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller (mac)
      if: matrix.os == 'macos-latest'
      run: |
        source venv/bin/activate
        pyinstaller --onefile --target-architecture universal2 crx-to-xpi.py

    - name: Build with PyInstaller (linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        source venv/bin/activate
        pyinstaller --onefile crx-to-xpi.py

    - name: Build with PyInstaller (win)
      if: matrix.os == 'windows-latest'
      run: |
        venv\Scripts\activate.ps1
        pyinstaller --onefile crx-to-xpi.py

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/crx-to-xpi${{ matrix.binary_extension }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/crx-to-xpi_linux_x64/crx-to-xpi_linux_x64
          ./artifacts/crx-to-xpi_mac_universal/crx-to-xpi_mac_universal
          ./artifacts/crx-to-xpi_win_x64/crx-to-xpi.exe
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}